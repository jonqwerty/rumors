{"version":3,"sources":["components/Dialogs/Dialogs.module.css","hoc/withAuthRedirect.tsx","components/Dialogs/AddMessageForm/AddMessageForm.tsx","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["module","exports","mapStateToPropsForRedirect","state","isAuth","auth","maxLength50","maxLengthCreator","AddMessageFormRedux","reduxForm","form","props","onSubmit","handleSubmit","Field","component","Textarea","validate","required","name","placeholder","DialogItem","path","id","className","s","dialog","active","to","Message","message","Dialogs","dialogsPage","dialogsElements","dialogs","map","d","messagesElements","messages","m","dialogsItems","values","sendMessage","newMessageBody","compose","connect","actions","WrappedComponent","restProps"],"mappings":"iGACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,2B,iGCI9KC,EAA6B,SAACC,GAAD,MAA0B,CACvDC,OAAQD,EAAME,KAAKD,S,8CCCjBE,EAAcC,YAAiB,IAqBxBC,EAAsBC,YAAoC,CAACC,KAAM,wBAA3CD,EAfkE,SAACE,GAClG,OACI,uBAAMC,SAAUD,EAAME,aAAtB,UACI,8BACI,cAACC,EAAA,EAAD,CAAOC,UAAWC,IAClBC,SAAU,CAACC,IAAUZ,GACrBa,KAAK,iBACLC,YAAY,yBAGhB,8BAAK,kD,0BCJFC,EAVyB,SAACV,GAErC,IAAIW,EAAO,YAAcX,EAAMY,GAC/B,OACI,qBAAKC,UAAWC,IAAEC,OAAS,IAAMD,IAAEE,OAAnC,SACI,eAAC,IAAD,CAASC,GAAIN,EAAb,cAAqBX,EAAMQ,WCExBU,EARsB,SAAClB,GAClC,OAEI,qBAAKa,UAAWC,IAAEC,OAAlB,SAA2Bf,EAAMmB,WCsC1BC,EA/ByB,SAACpB,GAErC,IAAIR,EAAQQ,EAAMqB,YAEdC,EAAkB9B,EAAM+B,QAAQC,KAAK,SAAAC,GAAC,OAAI,cAAC,EAAD,CAAYjB,KAAMiB,EAAEjB,KAAiBI,GAAIa,EAAEb,IAAZa,EAAEb,OAC3Ec,EAAmBlC,EAAMmC,SAASH,KAAI,SAAAI,GAAC,OAAI,cAAC,EAAD,CAAST,QAASS,EAAET,SAAcS,EAAEhB,OAQnF,OACI,sBAAKC,UAAWC,IAAES,QAAlB,UACI,qBAAKV,UAAWC,IAAEe,aAAlB,SAEMP,IAGN,qBAAKT,UAAWC,IAAEa,SAAlB,SAEK,8BAAMD,MAGX,cAAC7B,EAAD,CAAqBI,SAlBT,SAAC6B,GACjB9B,EAAM+B,YAAYD,EAAOE,uBCHlBC,sBACXC,aAfkB,SAAC1C,GACnB,MAAO,CACH6B,YAAa7B,EAAM6B,eAahB,eAAuBc,OLP3B,SAA+BC,GAclC,OAFqCF,YAA6D3C,EAA4B,GAAzF2C,EAViC,SAAClC,GAAW,IACzEP,EAAwBO,EAAxBP,OAAW4C,EAD6D,YAChDrC,EADgD,YAG7E,OAAKP,EAEE,cAAC2C,EAAD,eAAsBC,IAFT,cAAC,IAAD,CAAUpB,GAAG,gBKC1BgB,CAGZb","file":"static/js/4.6757c97b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__33Ei-\",\"dialogsItems\":\"Dialogs_dialogsItems__chtum\",\"active\":\"Dialogs_active__DaD45\",\"messages\":\"Dialogs_messages__3pc68\",\"message\":\"Dialogs_message__a8cCb\"};","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { Redirect } from 'react-router-dom'\r\nimport { AppStateType } from '../redux/redux-store'\r\n\r\nlet mapStateToPropsForRedirect = (state: AppStateType) => ({\r\n    isAuth: state.auth.isAuth\r\n} as MapPropsType)\r\n\r\ntype MapPropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\ntype DispatchPropsType = {\r\n   \r\n}\r\n\r\nexport function withAuthRedirect<WCP>(WrappedComponent: React.ComponentType<WCP>) {\r\n\r\n    const RedirectComponent: React.FC<MapPropsType & DispatchPropsType> = (props) => {\r\n        let {isAuth, ...restProps} = props\r\n        \r\n        if (!isAuth) return <Redirect to='/login' />\r\n\r\n        return <WrappedComponent {...restProps as WCP} />\r\n \r\n    }\r\n    \r\n    \r\n    let ConnectedAuthRedirectComponent = connect<MapPropsType, DispatchPropsType, WCP, AppStateType> (mapStateToPropsForRedirect, {}) (RedirectComponent)\r\n\r\n    return ConnectedAuthRedirectComponent\r\n}","import React from 'react'\r\nimport { Field, InjectedFormProps, reduxForm } from 'redux-form'\r\nimport { maxLengthCreator, required } from '../../../utils/validators/validators'\r\nimport { Textarea } from '../../common/FormsControls/FormsControls'\r\nimport { NewMessageFormType as NewMessageFormValuesType } from '../Dialogs'\r\n\r\n\r\nconst maxLength50 = maxLengthCreator(50)\r\n\r\ntype  NewMessageFormValuesKeysType = Extract<keyof NewMessageFormValuesType, string>\r\ntype PropsType = {}\r\n\r\n\r\nconst AddMessageForm: React.FC<InjectedFormProps<NewMessageFormValuesType, PropsType> & PropsType> = (props) => {\r\n    return ( \r\n        <form onSubmit={props.handleSubmit }>\r\n            <div>\r\n                <Field component={Textarea} \r\n                validate={[required, maxLength50]}\r\n                name=\"newMessageBody\" \r\n                placeholder='Enter your message'/>\r\n                \r\n            </div>\r\n            <div><button >Send</button></div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport const AddMessageFormRedux = reduxForm<NewMessageFormValuesType>({form: \"dialogAddMessageForm\"}) (AddMessageForm)","import React from 'react'\r\nimport { NavLink } from 'react-router-dom'\r\nimport  s from './../Dialogs.module.css'\r\n\r\ntype  PropsType = {\r\n    id: number\r\n    name:  string\r\n}\r\n\r\nconst DialogItem: React.FC<PropsType> = (props) => {\r\n\r\n    let path = '/dialogs/' + props.id\r\n    return (\r\n        <div className={s.dialog + ' ' + s.active}>\r\n            <NavLink to={path}> {props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DialogItem","\r\nimport React from 'react'\r\nimport  s from './../Dialogs.module.css'\r\n\r\ntype PropsType = {\r\n    message: string\r\n}\r\n\r\nconst Message: React.FC<PropsType> = (props) => {\r\n    return(\r\n      \r\n        <div className={s.dialog}>{props.message}</div>\r\n\r\n    )\r\n}\r\n\r\nexport default Message","\r\nimport React from 'react'\r\nimport { Redirect } from 'react-router-dom'\r\nimport { InitialStateType } from '../../redux/dialogs-reducer'\r\nimport { AddMessageFormRedux } from './AddMessageForm/AddMessageForm'\r\nimport DialogItem from './DialogItem/DialogItem'\r\nimport  s from './Dialogs.module.css'\r\nimport Message from './Message/Message'\r\n\r\ntype OwnPropsType = {\r\n    dialogsPage: InitialStateType\r\n    sendMessage: (messageText: string) => void\r\n}\r\n\r\nexport type NewMessageFormType = {\r\n    newMessageBody: string\r\n}\r\n\r\nconst Dialogs: React.FC<OwnPropsType> = (props) => {\r\n    \r\n    let state = props.dialogsPage;\r\n\r\n    let dialogsElements = state.dialogs.map( d => <DialogItem name={d.name} key={d.id} id={d.id}/>) \r\n    let messagesElements = state.messages.map(m => <Message message={m.message} key={m.id} />);\r\n       \r\n    let addNewMessage = (values: {newMessageBody: string}) => {\r\n        props.sendMessage(values.newMessageBody)\r\n    }\r\n\r\n    //if (!props.isAuth ) return <Redirect  to={\"/login\"} />;\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n            \r\n                { dialogsElements }\r\n                \r\n            </div>\r\n            <div className={s.messages}>\r\n\r\n                 <div>{messagesElements }</div>\r\n                     \r\n            </div>\r\n            <AddMessageFormRedux onSubmit={addNewMessage} />\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dialogs","\r\nimport React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { compose } from 'redux';\r\nimport { withAuthRedirect } from '../../hoc/withAuthRedirect';\r\nimport { actions } from '../../redux/dialogs-reducer';\r\nimport { AppStateType } from '../../redux/redux-store';\r\nimport Dialogs from './Dialogs';\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n    }\r\n}\r\n\r\n// let mapDispatchToProps = (dispatch) => {\r\n//     return {\r\n//         sendMessage: (newMessageBody) => {\r\n//             dispatch(actions.sendMessage(newMessageBody));\r\n//         }\r\n//     }\r\n// }\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {... actions }),\r\n    withAuthRedirect\r\n) (Dialogs);\r\n\r\n// let AuthRedirectComponent = withAuthRedirect(Dialogs);\r\n\r\n// const DialogsContainer = connect(mapStateToProps, mapDispatchToProps)(AuthRedirectComponent);\r\n\r\n// export default DialogsContainer;"],"sourceRoot":""}