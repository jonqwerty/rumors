{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/MyPosts/AddPostForm/AddPostForm.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["module","exports","reduxForm","form","props","onSubmit","handleSubmit","Field","component","name","Post","className","s","item","src","message","likesCount","MyPosts","postsElements","posts","reverse","map","p","id","postsBlock","values","addPost","newPostText","MyPostsMemorized","React","memo","MyPostsContainer","connect","state","profilePage","actions","addPostActionCreator","ProfileStatusWithHooks","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","ProfileDataFormReduxForm","profile","error","style","formSummaryError","placeholder","Input","type","Textarea","Object","keys","contacts","key","contact","ProfileData","isOwner","goToEditMode","onClick","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","contactTitle","contactValue","Contact","ProfileInfo","savePhoto","saveProfile","Preloader","topImage","descriptionBlock","photos","large","userPhoto","mainPhoto","target","files","length","initialValues","formData","then","Profile","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","getUserProfile","getStatus","console","log","refreshProfile","prevProps","prevState","Component","compose","auth","isAuth","withRouter"],"mappings":"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","file":"static/js/3.e507c861.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__1BMW6\",\"mainPhoto\":\"ProfileInfo_mainPhoto__1ElXz\",\"contact\":\"ProfileInfo_contact__1ER_l\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__W-GOd\",\"posts\":\"MyPosts_posts__30msV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__19K5h\"};","import React from 'react'\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\"\r\nimport {createField, GetStringKeys, Input} from '../../../common/FormsControls/FormsControls'\r\nimport {required} from '../../../../utils/validators/validators'\r\n\r\ntype PropsType = {\r\n\r\n}\r\n\r\nexport type AddPostFormValuesType = {\r\n    newPostText: string\r\n}\r\n\r\n//type AddPostFormValuesTypeKeys = GetStringKeys<AddPostFormValuesType>\r\n\r\nconst AddPostForm: React.FC<InjectedFormProps<AddPostFormValuesType, PropsType> & PropsType> = (props) => {\r\n    return (\r\n            <form onSubmit={props.handleSubmit}>\r\n                <div>\r\n                    <Field component={\"textarea\"} name=\"newPostText\" />\r\n                </div>\r\n                <div>\r\n                    <button>Add post</button>\r\n                </div>\r\n            </form>\r\n    )\r\n}\r\n\r\nexport default reduxForm<AddPostFormValuesType, PropsType>({form: 'profile-add-post'})(AddPostForm)","import React from 'react'\r\nimport s from './Post.module.css'\r\n\r\ntype PropsType = {\r\n    message: string\r\n    likesCount: number\r\n}\r\n\r\nconst Post: React.FC<PropsType> = (props) => {\r\n    return (\r\n        <div className={s.item}>\r\n            <img src='https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcTKvi0zkOBGtHXb-mcQToL8gTGUx_ZCnz1qpA&usqp=CAU' />\r\n            {props.message}\r\n            <div>\r\n            <span>like {props.likesCount}</span>\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Post","import React from 'react'\r\nimport { Field, reduxForm } from 'redux-form'\r\nimport { PostType } from '../../../types/types'\r\nimport { maxLengthCreator, required } from '../../../utils/validators/validators'\r\nimport { Textarea } from '../../common/FormsControls/FormsControls'\r\nimport AddPostForm, { AddPostFormValuesType } from './AddPostForm/AddPostForm'\r\n\r\nimport s from './MyPosts.module.css'\r\nimport Post from './Post/Post'\r\n\r\nexport type MapPropsType = {\r\n    posts: Array<PostType>\r\n}\r\n\r\nexport type DispatchPropsType = {\r\n    addPost: (newPostText: string) => void\r\n}\r\n\r\n\r\nconst MyPosts: React.FC<MapPropsType & DispatchPropsType > = (props) => {\r\n    let postsElements = \r\n    [...props.posts]\r\n    .reverse()\r\n    .map( p => <Post key={p.id} message={p.message} likesCount={p.likesCount} />)\r\n\r\n    \r\n    let onAddPost = (values: AddPostFormValuesType) => {\r\n       props.addPost(values.newPostText)\r\n    }\r\n    \r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3>My posts</h3>\r\n            <AddPostForm onSubmit={onAddPost} />\r\n            <div className={s.posts}>  \r\n                { postsElements }\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nconst MyPostsMemorized = React.memo(MyPosts)\r\n\r\nexport default MyPostsMemorized","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { actions } from '../../../redux/profile-reducer'\r\nimport { AppStateType } from '../../../redux/redux-store'\r\nimport MyPosts, { DispatchPropsType, MapPropsType } from './MyPosts'\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n    } \r\n}\r\n// const mapDispatchToProps = (dispatch) => {\r\n//     return {\r\n        \r\n//         addPost: (newPostText) => {\r\n//             dispatch((newPostText))\r\n//         }\r\n//     }\r\n// }\r\nconst MyPostsContainer = connect<MapPropsType, DispatchPropsType, {}, AppStateType>(mapStateToProps, {\r\n    addPost: actions.addPostActionCreator\r\n})(MyPosts)\r\n\r\n\r\nexport default MyPostsContainer","\r\nimport React, { ChangeEvent, useEffect,  useState } from 'react'\r\nimport s from './ProfileInfo.module.css'\r\nimport w from './profile_top.jpg'\r\n\r\ntype PropsType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nconst ProfileStatusWithHooks: React.FC<PropsType> = (props) =>  {\r\n\r\n   \r\n    let [editMode, setEditMode ] = useState(false)\r\n    let [status, setStatus ] = useState(props.status)\r\n\r\n    useEffect( () => {\r\n        setStatus(props.status)\r\n    }, [props.status] )\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n    \r\n    const deactivateEditMode = () =>  {\r\n        setEditMode(false)\r\n        props.updateStatus(status);  \r\n    }\r\n\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n        \r\n    }\r\n\r\n    return (\r\n        <div >\r\n            {!editMode &&\r\n                <div>\r\n                   <b>Status :</b> <span onDoubleClick={ activateEditMode } >{props.status || '-----------'}</span>\r\n                </div>\r\n            }\r\n            {editMode &&\r\n                <div>\r\n                    <input onChange={onStatusChange} autoFocus={true} onBlur={ deactivateEditMode} value={status}  />\r\n                </div>\r\n            }\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default ProfileStatusWithHooks","import React from 'react'\r\nimport { Field, InjectedFormProps, reduxForm } from 'redux-form'\r\nimport s from'./ProfileInfo.module.css'\r\nimport { createField, Input, Textarea } from '../../common/FormsControls/FormsControls'\r\nimport style from '../../common/FormsControls/FormsControls.module.css'\r\nimport { ProfileType } from '../../../types/types'\r\n\r\n\r\ntype PropsType = {\r\n    profile: ProfileType\r\n}\r\n\r\n\r\nconst ProfileDataForm: React.FC<InjectedFormProps<ProfileType, PropsType> & PropsType> = ({handleSubmit, profile, error}) => {\r\n    return <form onSubmit={handleSubmit}>\r\n            <div><button>Save</button></div>\r\n            {error && <div className={style.formSummaryError}>\r\n                {error}\r\n            </div>\r\n            }\r\n            <div>\r\n                <b>Full name</b>: <Field placeholder={'Full name'} \r\n                                        name={'fullName'}\r\n                                        component={Input}/> \r\n            </div>\r\n            <div>\r\n                <b>Looking for a job</b>: <Field name={'lookingForAJob'} \r\n                                                component={Input}  \r\n                                                type={\"checkbox\"}/> \r\n                \r\n            </div>\r\n           \r\n            <div>\r\n                <b>My professional skills</b>: <Field placeholder={'My professional skills'}\r\n                                                name={'lookingForAJobDescription'} \r\n                                                component={Textarea} /> \r\n                \r\n\r\n            </div>\r\n            <div>\r\n                <b>About me </b>: <Field placeholder={'About me'}\r\n                                        name={'aboutMe'} \r\n                                        component={Textarea} /> \r\n            </div>\r\n            <div>\r\n                 <b>Contacts</b>: { Object.keys(profile.contacts).map(key => {\r\n                   return <div key={key} className={s.contact}>\r\n                       <b>{key}: <Field placeholder={key} \r\n                                        name={'contacts.' + key}\r\n                                        component={Input}/> </b>\r\n                   </div>\r\n                }) } \r\n            </div>\r\n        </form>                   \r\n}\r\n\r\nconst ProfileDataFormReduxForm = reduxForm<ProfileType, PropsType>({form: 'edit-profile'}) (ProfileDataForm)\r\n\r\nexport default ProfileDataFormReduxForm","\r\nimport React, { ChangeEvent, useState } from 'react'\r\nimport s from'./ProfileInfo.module.css'\r\nimport w from './profile_top.jpg'\r\nimport ProfileStatus from './ProfileStatus'\r\nimport Preloader from '../../common/Preloader/Preloader'\r\nimport ProfileStatusWithHooks from './ProfileStatusWithHooks'\r\nimport userPhoto from './../../../assets/images/default_image.png'\r\nimport ProfileDataForm from './ProfileDataForm'\r\nimport { ContactsType, ProfileType } from '../../../types/types'\r\n\r\ntype PropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (profile: ProfileType) => Promise<any>\r\n}\r\n\r\nconst ProfileInfo: React.FC<PropsType> = ({profile, status, updateStatus, isOwner, savePhoto, saveProfile}) => {\r\n\r\n    let [editMode, setEditMode] = useState(false)\r\n    if (!profile){\r\n        return <Preloader />\r\n    }\r\n\r\n    const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files?.length) {\r\n            savePhoto(e.target.files[0])\r\n        }\r\n    }\r\n\r\n    const onSubmit = (formData: ProfileType) => {\r\n        saveProfile(formData).then(\r\n            () => {\r\n                setEditMode(false)  \r\n            }\r\n        )   \r\n    }\r\n\r\n    return (\r\n        <div className={s.topImage}>\r\n           \r\n            <div className={s.descriptionBlock}>\r\n                <img src={ profile.photos.large || userPhoto } className={s.mainPhoto}/>\r\n                { isOwner && <input type={'file'} onChange={onMainPhotoSelected} /> }\r\n\r\n                { editMode \r\n                ? <ProfileDataForm initialValues ={profile} profile={profile} onSubmit={onSubmit} /> \r\n                : <ProfileData goToEditMode={ () => {setEditMode(true)} } profile={profile} isOwner={isOwner} /> }\r\n                \r\n                <ProfileStatusWithHooks status={status} updateStatus={updateStatus}/>\r\n            </div>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\ntype ProfileDataPropsType = {\r\n    profile: ProfileType\r\n    isOwner: boolean\r\n    goToEditMode: () => void\r\n}\r\n\r\nconst ProfileData: React.FC<ProfileDataPropsType> = ({profile, isOwner, goToEditMode}) => {\r\n    return (\r\n        <div>\r\n            { isOwner && <div><button onClick={goToEditMode}>Edit</button></div>}\r\n                    <div>\r\n                        <b>Full name</b>: {profile.fullName}\r\n                    </div>\r\n                    <div>\r\n                        <b>Looking for a job</b>: {profile.lookingForAJob ? 'yes': 'no'}\r\n                    </div>\r\n                    { profile.lookingForAJob &&\r\n                    <div>\r\n                        <b>My professional skills</b>: {profile.lookingForAJobDescription}\r\n                    </div>\r\n                    }\r\n                    <div>\r\n                        <b>About me </b>: {profile.aboutMe}\r\n                    </div>\r\n                    <div>\r\n                        <b>Contacts</b>: { \r\n                        Object\r\n                        .keys(profile.contacts)\r\n                        .map(key => {\r\n                           return <Contact key={key} contactTitle={key} contactValue={profile.contacts[key as keyof ContactsType]}  />\r\n                        }) }\r\n                    </div>\r\n                </div>\r\n\r\n\r\n    )\r\n}\r\n\r\ntype ContactsPropsType = {\r\n    contactTitle: string\r\n    contactValue: string\r\n}\r\n\r\nconst Contact: React.FC<ContactsPropsType> = ({contactTitle, contactValue}) => {\r\n    return <div className={s.contact}><b>{contactTitle}</b>: {contactValue}</div>\r\n\r\n}\r\n\r\nexport default ProfileInfo","import React from 'react'\r\nimport { ProfileType } from '../../types/types'\r\nimport Preloader from '../common/Preloader/Preloader'\r\nimport MyPosts from './MyPosts/MyPosts'\r\nimport MyPostsContainer from './MyPosts/MyPostsContainer'\r\nimport s from'./Profile.module.css'\r\nimport ProfileInfo from './ProfileInfo/ProfileInfo'\r\n\r\ntype PropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (profile: ProfileType) => Promise<any>\r\n}\r\n\r\n\r\nconst Profile: React.FC<PropsType> = (props) => {\r\n    if (!props.profile) {\r\n        return <Preloader />\r\n    }\r\n    \r\n    return (\r\n        <div >\r\n            <ProfileInfo savePhoto={props.savePhoto} \r\n            isOwner={props.isOwner} \r\n            profile={props.profile} \r\n            status={props.status} \r\n            updateStatus={props.updateStatus}\r\n            saveProfile={props.saveProfile} />\r\n            \r\n            <MyPostsContainer  />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport Profile from './Profile'\r\nimport { getUserProfile, getStatus, updateStatus, savePhoto, saveProfile } from './../../redux/profile-reducer'\r\n\r\nimport { Redirect, RouteComponentProps, withRouter } from 'react-router-dom'\r\nimport { withAuthRedirect } from '../../hoc/withAuthRedirect'\r\nimport { compose } from 'redux'\r\nimport { AppStateType } from '../../redux/redux-store'\r\nimport { ProfileType } from '../../types/types'\r\n\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    getUserProfile: (userId: number) => void    \r\n    getStatus: (userId: number) => void\r\n    updateStatus: (status: string) => void\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (profile: ProfileType) => Promise<any>\r\n}\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\n\r\ntype PropsType = MapPropsType & MapDispatchPropsType & RouteComponentProps<PathParamsType>\r\n\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n\r\n    refreshProfile () {\r\n        let userId: number | null = +this.props.match.params.userId;\r\n        if(!userId) {\r\n            userId = this.props.authorizedUserId;\r\n            if (!userId) {\r\n                this.props.history.push('/login')\r\n            }\r\n        }\r\n\r\n        if (!userId) {\r\n            console.log(\"ID should exists in URI params or in state('authorizedId')\")\r\n        } else {\r\n            this.props.getUserProfile(userId )\r\n            this.props.getStatus(userId)\r\n        }\r\n        \r\n    }\r\n    componentDidMount() {\r\n        this.refreshProfile () \r\n        \r\n    }\r\n\r\n    componentDidUpdate (prevProps: PropsType, prevState: PropsType) {\r\n        if (this.props.match.params.userId != prevProps.match.params.userId) {\r\n            this.refreshProfile () \r\n        }\r\n               \r\n    }\r\n\r\n    render() {\r\n        \r\n        return (\r\n            <Profile { ...this.props }\r\n            isOwner={!this.props.match.params.userId} \r\n            profile={this.props.profile} \r\n            status={this.props.status} \r\n            updateStatus={this.props.updateStatus}\r\n            savePhoto={this.props.savePhoto} />\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType) => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.userId,\r\n    isAuth: state.auth.isAuth \r\n});\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, { getUserProfile, getStatus, updateStatus, savePhoto, saveProfile  }),\r\n    withRouter,\r\n    //withAuthRedirect\r\n)(ProfileContainer)\r\n\r\n"],"sourceRoot":""}